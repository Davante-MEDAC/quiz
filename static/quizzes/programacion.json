{
  "id": "programacion",
  "title": "Programaci√≥n",
  "description": "Eval√∫a tu comprensi√≥n de los conceptos de programaci√≥n",
  "icon": "üë©üèª‚Äçüíª",
  "lessons": [
    {
      "name": "Fundamentos de Programaci√≥n",
      "questions": [
        {
          "id": 1,
          "type": "multiple_choice",
          "question": "¬øCu√°l es la diferencia principal entre datos e informaci√≥n seg√∫n el documento?",
          "options": [
            "Los datos son digitales y la informaci√≥n es anal√≥gica",
            "Los datos tienen significado puntual, la informaci√≥n resulta del procesamiento e interrelaci√≥n de datos",
            "Los datos son n√∫meros y la informaci√≥n son palabras",
            "No hay diferencia, son sin√≥nimos"
          ],
          "correctAnswer": 1,
          "explanation": "Seg√∫n el documento, los datos tienen un significado puntual mientras que la informaci√≥n resulta del procesamiento, interpretaci√≥n e interrelaci√≥n de los datos."
        },
        {
          "id": 2,
          "type": "multiple_choice",
          "question": "¬øCu√°les son los tres elementos principales de una m√°quina de proceso?",
          "options": [
            "Hardware, software y usuario",
            "Entrada, unidad de proceso y salida",
            "Datos, algoritmos y resultados",
            "Compilador, int√©rprete y ejecutor"
          ],
          "correctAnswer": 1,
          "explanation": "El documento establece que una m√°quina de proceso tiene tres elementos: entrada (elementos que se introducen), unidad de proceso (donde se realiza el procesamiento) y salida (resultado del procesamiento)."
        },
        {
          "id": 3,
          "type": "multiple_choice",
          "question": "¬øQu√© caracter√≠stica diferencia al lenguaje m√°quina de los lenguajes de alto nivel?",
          "options": [
            "El lenguaje m√°quina es m√°s r√°pido",
            "El lenguaje m√°quina est√° compuesto por 0s y 1s y es directamente entendible por el procesador",
            "El lenguaje m√°quina es m√°s f√°cil de programar",
            "El lenguaje m√°quina no necesita compilaci√≥n"
          ],
          "correctAnswer": 1,
          "explanation": "El documento explica que el lenguaje m√°quina est√° compuesto por instrucciones basadas en 0s y 1s que son directamente entendibles por el procesador."
        },
        {
          "id": 4,
          "type": "multiple_choice",
          "question": "¬øCu√°l es la diferencia entre compiladores e int√©rpretes?",
          "options": [
            "Los compiladores son m√°s lentos que los int√©rpretes",
            "Los compiladores traducen completamente el programa antes de ejecutarlo, los int√©rpretes ejecutan cada instrucci√≥n seg√∫n la van traduciendo",
            "Los int√©rpretes son para lenguajes de alto nivel",
            "No hay diferencia significativa entre ambos"
          ],
          "correctAnswer": 1,
          "explanation": "Los compiladores traducen el programa fuente completamente antes de ejecutarlo, mientras que los int√©rpretes ejecutan cada instrucci√≥n seg√∫n las van traduciendo."
        },
        {
          "id": 5,
          "type": "multiple_choice",
          "question": "¬øCu√°les son las dos caracter√≠sticas fundamentales que debe tener un algoritmo v√°lido?",
          "options": [
            "Rapidez y eficiencia",
            "Finitud y determinismo",
            "Simplicidad y claridad",
            "Portabilidad y reutilizaci√≥n"
          ],
          "correctAnswer": 1,
          "explanation": "El documento destaca que las dos caracter√≠sticas fundamentales de un algoritmo son la finitud (debe tener un n√∫mero finito de pasos) y el determinismo (debe producir el mismo resultado para las mismas entradas)."
        },
        {
          "id": 6,
          "type": "multiple_choice",
          "question": "¬øQu√© representa la complejidad O(n) en los algoritmos?",
          "options": [
            "El n√∫mero de l√≠neas de c√≥digo",
            "La dificultad de programaci√≥n",
            "La eficiencia del algoritmo representada como una funci√≥n que depende del tama√±o 'n'",
            "El tiempo de desarrollo del algoritmo"
          ],
          "correctAnswer": 2,
          "explanation": "La eficiencia se representa como una funci√≥n que depende de un par√°metro llamado tama√±o 'n', y la complejidad de un algoritmo se llama orden O(n)."
        },
        {
          "id": 7,
          "type": "multiple_choice",
          "question": "¬øQu√© es un programa inform√°tico seg√∫n el documento?",
          "options": [
            "Solo el c√≥digo fuente escrito por el programador",
            "Tanto los datos como la secuencia de acciones para realizar el procesamiento deseado",
            "√önicamente las instrucciones que ejecuta el procesador",
            "El resultado final que obtiene el usuario"
          ],
          "correctAnswer": 1,
          "explanation": "El documento define programa inform√°tico como tanto los datos como la secuencia de acciones que hay que llevar a cabo para realizar el procesamiento deseado."
        },
        {
          "id": 8,
          "type": "multiple_choice",
          "question": "¬øEn qu√© se diferencia un lenguaje ensamblador del lenguaje m√°quina?",
          "options": [
            "El ensamblador usa comandos de tres letras como SUB en lugar de 0s y 1s",
            "El ensamblador es un lenguaje de alto nivel",
            "El ensamblador no necesita traducci√≥n",
            "No hay diferencia, son lo mismo"
          ],
          "correctAnswer": 0,
          "explanation": "El lenguaje ensamblador utiliza comandos, normalmente de longitud tres como SUB para hacer restas, simplificando la complejidad del lenguaje m√°quina que usa 0s y 1s."
        },
        {
          "id": 9,
          "type": "multiple_choice",
          "question": "¬øCu√°l es la diferencia entre eficacia y eficiencia en programaci√≥n?",
          "options": [
            "Eficacia es velocidad, eficiencia es precisi√≥n",
            "Eficacia es que el programa funcione, eficiencia es que funcione bien usando menos recursos",
            "Son sin√≥nimos en programaci√≥n",
            "Eficacia es para algoritmos, eficiencia para programas"
          ],
          "correctAnswer": 1,
          "explanation": "Eficacia implica que el programa funcione y cumpla los requisitos, mientras que eficiencia se refiere a realizar el trabajo r√°pidamente y utilizando la menor cantidad posible de recursos."
        },
        {
          "id": 10,
          "type": "multiple_choice",
          "question": "¬øCu√°les son las fases del ciclo de vida del software mencionadas en el documento?",
          "options": [
            "An√°lisis, especificaci√≥n, dise√±o, implementaci√≥n, pruebas y mantenimiento",
            "Planificaci√≥n, desarrollo, testing y deployment",
            "Dise√±o, codificaci√≥n, compilaci√≥n y ejecuci√≥n",
            "Requisitos, arquitectura, desarrollo y mantenimiento"
          ],
          "correctAnswer": 0,
          "explanation": "El documento lista las fases como: an√°lisis (¬øqu√©?), especificaci√≥n, dise√±o (¬øc√≥mo?), implementaci√≥n, pruebas y mantenimiento."
        },
        {
          "id": 11,
          "type": "multiple_choice",
          "question": "¬øQu√© ventaja principal ofrecen los lenguajes de programaci√≥n de alto nivel?",
          "options": [
            "Son m√°s r√°pidos de ejecutar",
            "Su similitud con el lenguaje natural humano, normalmente el ingl√©s",
            "No necesitan ser traducidos",
            "Ocupan menos memoria"
          ],
          "correctAnswer": 1,
          "explanation": "Una de las ventajas de los lenguajes de programaci√≥n de alto nivel es su similitud con el lenguaje natural humano, normalmente con el ingl√©s."
        },
        {
          "id": 12,
          "type": "multiple_choice",
          "question": "¬øQu√© son los lenguajes imperativos o procedimentales?",
          "options": [
            "Lenguajes que describen el resultado deseado sin especificar los pasos",
            "Lenguajes que se centran en c√≥mo se debe realizar una tarea, detallando los pasos exactos",
            "Lenguajes que solo usan funciones matem√°ticas",
            "Lenguajes de bajo nivel √∫nicamente"
          ],
          "correctAnswer": 1,
          "explanation": "Los lenguajes imperativos se centran en c√≥mo se debe realizar una tarea, detallando los pasos exactos que el programa debe seguir para alcanzar un resultado."
        },
        {
          "id": 13,
          "type": "multiple_choice",
          "question": "¬øQu√© diferencia hay entre sintaxis y sem√°ntica en programaci√≥n?",
          "options": [
            "Sintaxis es el significado, sem√°ntica son las reglas",
            "Sintaxis son las reglas de escritura, sem√°ntica es el significado del c√≥digo",
            "Son conceptos id√©nticos",
            "Sintaxis es para compiladores, sem√°ntica para int√©rpretes"
          ],
          "correctAnswer": 1,
          "explanation": "La sintaxis se refiere a las reglas y estructuras gramaticales para escribir instrucciones, mientras la sem√°ntica alude al significado o interpretaci√≥n del c√≥digo escrito."
        },
        {
          "id": 14,
          "type": "multiple_choice",
          "question": "¬øCu√°l es la estructura b√°sica de un programa seg√∫n el documento?",
          "options": [
            "Inicio, desarrollo y fin",
            "Entrada, procesamiento y salida de informaci√≥n",
            "Variables, funciones y clases",
            "Compilaci√≥n, enlazado y ejecuci√≥n"
          ],
          "correctAnswer": 1,
          "explanation": "Todo programa sigue t√≠picamente un modelo b√°sico de entrada, procesamiento y salida de informaci√≥n, donde acepta datos de entrada y los procesa mediante algoritmos."
        },
        {
          "id": 15,
          "type": "multiple_choice",
          "question": "¬øQu√© caracter√≠stica NO es propia de un algoritmo v√°lido?",
          "options": [
            "Debe ser preciso e indicar el orden de realizaci√≥n",
            "Ha de estar definido",
            "Debe ser infinito para cubrir todos los casos",
            "Es independiente del lenguaje de programaci√≥n"
          ],
          "correctAnswer": 2,
          "explanation": "Un algoritmo debe ser finito, es decir, debe tener un n√∫mero finito de pasos. La opci√≥n de ser infinito contradice una caracter√≠stica fundamental de los algoritmos."
        },
        {
          "id": 16,
          "type": "multiple_choice",
          "question": "¬øQu√© ventajas tiene el pseudoc√≥digo frente a los diagramas de flujo?",
          "options": [
            "Es m√°s r√°pido de ejecutar",
            "Ocupa menos espacio, permite representar operaciones complejas f√°cilmente y es f√°cil convertir a c√≥digo",
            "Solo funciona con lenguajes espec√≠ficos",
            "No tiene ventajas significativas"
          ],
          "correctAnswer": 1,
          "explanation": "El documento menciona que el pseudoc√≥digo ocupa menos espacio en papel, permite representar operaciones repetitivas complejas f√°cilmente y es muy f√°cil pasar de pseudoc√≥digo a un programa."
        },
        {
          "id": 17,
          "type": "multiple_choice",
          "question": "¬øQu√© porcentaje del ciclo de vida del software corresponde al mantenimiento?",
          "options": [
            "20%",
            "50%",
            "80%",
            "100%"
          ],
          "correctAnswer": 2,
          "explanation": "El documento establece que la etapa de mantenimiento corresponde al 80% del ciclo de vida del software y va desde la obtenci√≥n de una herramienta operativa hasta la retirada del programa."
        },
        {
          "id": 18,
          "type": "multiple_choice",
          "question": "¬øCu√°les son las herramientas b√°sicas necesarias para desarrollar software?",
          "options": [
            "Solo un IDE moderno",
            "Editor de texto plano, compilador y l√≠nea de comandos",
            "√önicamente un navegador web",
            "Solo el sistema operativo"
          ],
          "correctAnswer": 1,
          "explanation": "El documento menciona que las herramientas necesarias para desarrollar software son b√°sicamente tres: editor de texto plano, compilador y l√≠nea de comandos."
        },
        {
          "id": 19,
          "type": "multiple_choice",
          "question": "¬øQu√© es un semialgoritmo seg√∫n el documento?",
          "options": [
            "Un algoritmo que funciona solo la mitad del tiempo",
            "Un algoritmo incompleto en desarrollo",
            "Soluciones parciales que pueden no satisfacer finitud y determinismo",
            "Un algoritmo que solo resuelve la mitad del problema"
          ],
          "correctAnswer": 2,
          "explanation": "Los semialgoritmos son soluciones parciales que pueden no satisfacer las dos caracter√≠sticas fundamentales de finitud y determinismo."
        },
        {
          "id": 20,
          "type": "multiple_choice",
          "question": "¬øQu√© funcionalidades importantes incorporan los IDE modernos para mejorar el desarrollo?",
          "options": [
            "Solo compilaci√≥n autom√°tica",
            "Autocompletado del c√≥digo fuente y resaltado de errores mediante precompilaci√≥n en tiempo real",
            "√önicamente depuraci√≥n de c√≥digo",
            "Solo gesti√≥n de archivos"
          ],
          "correctAnswer": 1,
          "explanation": "Los IDE actuales permiten el autocompletado del c√≥digo fuente y el resaltado de posibles errores mediante una precompilaci√≥n en tiempo real mientras se escribe el c√≥digo."
        }
      ]
    }
  ]
}
